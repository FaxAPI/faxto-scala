/**
 * Fax.to REST API client for Scala
 * This is Fax.to REST API client for Scala.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: inquiries@fax.to
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api

import java.text.SimpleDateFormat

import io.swagger.client.model.InlineResponse2005
import io.swagger.client.model.InlineResponse2006
import io.swagger.client.model.InlineResponse400
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class UserManagementApi(
  val defBasePath: String = "https://api.fax.to/api/v2",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new UserManagementApiAsyncHelper(client, config)

  /**
   * This API creates a subuser
   * 
   *
   * @param email The unique email of the user 
   * @param password The password of the subuser 
   * @param apiKey  
   * @return InlineResponse2006
   */
  def subUserPost(email: , password: , apiKey: String): Option[InlineResponse2006] = {
    val await = Try(Await.result(subUserPostAsync(email, password, apiKey), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * This API creates a subuser asynchronously
   * 
   *
   * @param email The unique email of the user 
   * @param password The password of the subuser 
   * @param apiKey  
   * @return Future(InlineResponse2006)
   */
  def subUserPostAsync(email: , password: , apiKey: String): Future[InlineResponse2006] = {
      helper.subUserPost(email, password, apiKey)
  }

  /**
   * This API is used for logging in on an existing user account
   * 
   *
   * @param email The unique email of the user 
   * @param password The password of the user 
   * @return InlineResponse2005
   */
  def userLoginPost(email: , password: ): Option[InlineResponse2005] = {
    val await = Try(Await.result(userLoginPostAsync(email, password), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * This API is used for logging in on an existing user account asynchronously
   * 
   *
   * @param email The unique email of the user 
   * @param password The password of the user 
   * @return Future(InlineResponse2005)
   */
  def userLoginPostAsync(email: , password: ): Future[InlineResponse2005] = {
      helper.userLoginPost(email, password)
  }

  /**
   * This API registers a new user account
   * 
   *
   * @param email The unique email of the user 
   * @param password The password of the user 
   * @return InlineResponse2005
   */
  def userPost(email: , password: ): Option[InlineResponse2005] = {
    val await = Try(Await.result(userPostAsync(email, password), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * This API registers a new user account asynchronously
   * 
   *
   * @param email The unique email of the user 
   * @param password The password of the user 
   * @return Future(InlineResponse2005)
   */
  def userPostAsync(email: , password: ): Future[InlineResponse2005] = {
      helper.userPost(email, password)
  }

}

class UserManagementApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def subUserPost(email: ,
    password: ,
    apiKey: String)(implicit reader: ClientResponseReader[InlineResponse2006], writer: RequestWriter[], writer: RequestWriter[]): Future[InlineResponse2006] = {
    // create path and map variables
    val path = (addFmt("/subuser"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (email == null) throw new Exception("Missing required parameter 'email' when calling UserManagementApi->subUserPost")
    if (password == null) throw new Exception("Missing required parameter 'password' when calling UserManagementApi->subUserPost")
    if (apiKey == null) throw new Exception("Missing required parameter 'apiKey' when calling UserManagementApi->subUserPost")

    headerParams += "api_key" -> apiKey.toString

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(password))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def userLoginPost(email: ,
    password: )(implicit reader: ClientResponseReader[InlineResponse2005], writer: RequestWriter[], writer: RequestWriter[]): Future[InlineResponse2005] = {
    // create path and map variables
    val path = (addFmt("/user/login"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (email == null) throw new Exception("Missing required parameter 'email' when calling UserManagementApi->userLoginPost")
    if (password == null) throw new Exception("Missing required parameter 'password' when calling UserManagementApi->userLoginPost")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(password))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def userPost(email: ,
    password: )(implicit reader: ClientResponseReader[InlineResponse2005], writer: RequestWriter[], writer: RequestWriter[]): Future[InlineResponse2005] = {
    // create path and map variables
    val path = (addFmt("/user"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (email == null) throw new Exception("Missing required parameter 'email' when calling UserManagementApi->userPost")
    if (password == null) throw new Exception("Missing required parameter 'password' when calling UserManagementApi->userPost")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(password))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
