/**
 * Fax.to REST API client for Scala
 * This is Fax.to REST API client for Scala.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: inquiries@fax.to
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api

import java.text.SimpleDateFormat

import io.swagger.client.model.InlineResponse20012
import io.swagger.client.model.InlineResponse20013
import io.swagger.client.model.InlineResponse20014
import io.swagger.client.model.InlineResponse20015
import io.swagger.client.model.InlineResponse20016
import io.swagger.client.model.InlineResponse20017
import io.swagger.client.model.InlineResponse2004
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class FaxReceivingApi(
  val defBasePath: String = "https://api.fax.to/api/v2",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new FaxReceivingApiAsyncHelper(client, config)

  /**
   * This API gets a list of countries with its area code
   * 
   *
   * @param COUNTRY_CODE Indicates the country code in its ISO 3166-1 alpha-3 format 
   * @param STATE_ID The numerical identifier for the state 
   * @param apiKey  
   * @return InlineResponse20014
   */
  def areaCodesCountryCodeStateIdGet(COUNTRY_CODE: Integer, STATE_ID: Integer, apiKey: String): Option[InlineResponse20014] = {
    val await = Try(Await.result(areaCodesCountryCodeStateIdGetAsync(COUNTRY_CODE, STATE_ID, apiKey), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * This API gets a list of countries with its area code asynchronously
   * 
   *
   * @param COUNTRY_CODE Indicates the country code in its ISO 3166-1 alpha-3 format 
   * @param STATE_ID The numerical identifier for the state 
   * @param apiKey  
   * @return Future(InlineResponse20014)
   */
  def areaCodesCountryCodeStateIdGetAsync(COUNTRY_CODE: Integer, STATE_ID: Integer, apiKey: String): Future[InlineResponse20014] = {
      helper.areaCodesCountryCodeStateIdGet(COUNTRY_CODE, STATE_ID, apiKey)
  }

  /**
   * This API gets a list of DID groups
   * 
   *
   * @param COUNTRY_CODE Indicates the country code of the DID group in its ISO 3166-1 alpha-3 format 
   * @param areaCode The area code of the DID group 
   * @param apiKey  
   * @param didGroupIds Used to display more information about specific DID groups (optional)
   * @param stateId The numerical identifier for the didGroup&#39;s state (optional)
   * @param cityNamePattern A string pattern for the beginning of city name (optional)
   * @return InlineResponse20015
   */
  def countriesCountryCodeDidGroupsGet(COUNTRY_CODE: Integer, areaCode: Integer, apiKey: String, didGroupIds: Option[Integer] = None, stateId: Option[Integer] = None, cityNamePattern: Option[Integer] = None): Option[InlineResponse20015] = {
    val await = Try(Await.result(countriesCountryCodeDidGroupsGetAsync(COUNTRY_CODE, areaCode, apiKey, didGroupIds, stateId, cityNamePattern), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * This API gets a list of DID groups asynchronously
   * 
   *
   * @param COUNTRY_CODE Indicates the country code of the DID group in its ISO 3166-1 alpha-3 format 
   * @param areaCode The area code of the DID group 
   * @param apiKey  
   * @param didGroupIds Used to display more information about specific DID groups (optional)
   * @param stateId The numerical identifier for the didGroup&#39;s state (optional)
   * @param cityNamePattern A string pattern for the beginning of city name (optional)
   * @return Future(InlineResponse20015)
   */
  def countriesCountryCodeDidGroupsGetAsync(COUNTRY_CODE: Integer, areaCode: Integer, apiKey: String, didGroupIds: Option[Integer] = None, stateId: Option[Integer] = None, cityNamePattern: Option[Integer] = None): Future[InlineResponse20015] = {
      helper.countriesCountryCodeDidGroupsGet(COUNTRY_CODE, areaCode, apiKey, didGroupIds, stateId, cityNamePattern)
  }

  /**
   * This API gets a list of countries available in the Fax.to coverage
   * 
   *
   * @param apiKey  
   * @return InlineResponse20012
   */
  def countriesGet(apiKey: String): Option[InlineResponse20012] = {
    val await = Try(Await.result(countriesGetAsync(apiKey), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * This API gets a list of countries available in the Fax.to coverage asynchronously
   * 
   *
   * @param apiKey  
   * @return Future(InlineResponse20012)
   */
  def countriesGetAsync(apiKey: String): Future[InlineResponse20012] = {
      helper.countriesGet(apiKey)
  }

  /**
   * This API gets a list of incoming faxes
   * 
   *
   * @param apiKey  
   * @param limit The number of record to return (optional)
   * @param page The page you want to get (optional)
   * @return InlineResponse2004
   */
  def incomingFaxesGet(apiKey: String, limit: Option[String] = None, page: Option[String] = None): Option[InlineResponse2004] = {
    val await = Try(Await.result(incomingFaxesGetAsync(apiKey, limit, page), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * This API gets a list of incoming faxes asynchronously
   * 
   *
   * @param apiKey  
   * @param limit The number of record to return (optional)
   * @param page The page you want to get (optional)
   * @return Future(InlineResponse2004)
   */
  def incomingFaxesGetAsync(apiKey: String, limit: Option[String] = None, page: Option[String] = None): Future[InlineResponse2004] = {
      helper.incomingFaxesGet(apiKey, limit, page)
  }

  /**
   * This API gets a list of incoming faxes for a specific recipient
   * 
   *
   * @param recipient The recipient&#39;s fax number 
   * @param apiKey  
   * @param limit The number of record to return (optional)
   * @param page The page you want to get (optional)
   * @return InlineResponse2004
   */
  def incomingFaxesRecipientGet(recipient: Integer, apiKey: String, limit: Option[String] = None, page: Option[String] = None): Option[InlineResponse2004] = {
    val await = Try(Await.result(incomingFaxesRecipientGetAsync(recipient, apiKey, limit, page), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * This API gets a list of incoming faxes for a specific recipient asynchronously
   * 
   *
   * @param recipient The recipient&#39;s fax number 
   * @param apiKey  
   * @param limit The number of record to return (optional)
   * @param page The page you want to get (optional)
   * @return Future(InlineResponse2004)
   */
  def incomingFaxesRecipientGetAsync(recipient: Integer, apiKey: String, limit: Option[String] = None, page: Option[String] = None): Future[InlineResponse2004] = {
      helper.incomingFaxesRecipientGet(recipient, apiKey, limit, page)
  }

  /**
   * This API gets a list of numbers to get the current configuration of one or multiple number
   * 
   *
   * @param apiKey  
   * @param limit The number of record to return (optional)
   * @param page The page you want to get (optional)
   * @return InlineResponse20017
   */
  def numbersGet(apiKey: String, limit: Option[String] = None, page: Option[String] = None): Option[InlineResponse20017] = {
    val await = Try(Await.result(numbersGetAsync(apiKey, limit, page), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * This API gets a list of numbers to get the current configuration of one or multiple number asynchronously
   * 
   *
   * @param apiKey  
   * @param limit The number of record to return (optional)
   * @param page The page you want to get (optional)
   * @return Future(InlineResponse20017)
   */
  def numbersGetAsync(apiKey: String, limit: Option[String] = None, page: Option[String] = None): Future[InlineResponse20017] = {
      helper.numbersGet(apiKey, limit, page)
  }

  /**
   * This API gets a list of provisioned numbers
   * 
   *
   * @param didGroupId The id of the did group 
   * @param apiKey  
   * @return InlineResponse20016
   */
  def provisionNumbersGet(didGroupId: Integer, apiKey: String): Option[InlineResponse20016] = {
    val await = Try(Await.result(provisionNumbersGetAsync(didGroupId, apiKey), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * This API gets a list of provisioned numbers asynchronously
   * 
   *
   * @param didGroupId The id of the did group 
   * @param apiKey  
   * @return Future(InlineResponse20016)
   */
  def provisionNumbersGetAsync(didGroupId: Integer, apiKey: String): Future[InlineResponse20016] = {
      helper.provisionNumbersGet(didGroupId, apiKey)
  }

  /**
   * This API gets a list of states of a given country available in the Fax.to coverage
   * 
   *
   * @param COUNTRY_CODE Indicates the country code in its ISO 3166-1 alpha-3 format 
   * @param apiKey  
   * @return InlineResponse20013
   */
  def statesCountryCodeGet(COUNTRY_CODE: Integer, apiKey: String): Option[InlineResponse20013] = {
    val await = Try(Await.result(statesCountryCodeGetAsync(COUNTRY_CODE, apiKey), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * This API gets a list of states of a given country available in the Fax.to coverage asynchronously
   * 
   *
   * @param COUNTRY_CODE Indicates the country code in its ISO 3166-1 alpha-3 format 
   * @param apiKey  
   * @return Future(InlineResponse20013)
   */
  def statesCountryCodeGetAsync(COUNTRY_CODE: Integer, apiKey: String): Future[InlineResponse20013] = {
      helper.statesCountryCodeGet(COUNTRY_CODE, apiKey)
  }

}

class FaxReceivingApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def areaCodesCountryCodeStateIdGet(COUNTRY_CODE: Integer,
    STATE_ID: Integer,
    apiKey: String)(implicit reader: ClientResponseReader[InlineResponse20014]): Future[InlineResponse20014] = {
    // create path and map variables
    val path = (addFmt("/areacodes/{COUNTRY_CODE}/{STATE_ID}")
      replaceAll("\\{" + "COUNTRY_CODE" + "\\}", COUNTRY_CODE.toString)
      replaceAll("\\{" + "STATE_ID" + "\\}", STATE_ID.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (apiKey == null) throw new Exception("Missing required parameter 'apiKey' when calling FaxReceivingApi->areaCodesCountryCodeStateIdGet")

    headerParams += "api_key" -> apiKey.toString

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def countriesCountryCodeDidGroupsGet(COUNTRY_CODE: Integer,
    areaCode: Integer,
    apiKey: String,
    didGroupIds: Option[Integer] = None,
    stateId: Option[Integer] = None,
    cityNamePattern: Option[Integer] = None
    )(implicit reader: ClientResponseReader[InlineResponse20015]): Future[InlineResponse20015] = {
    // create path and map variables
    val path = (addFmt("/countries/{countryCode}/didgroups")
      replaceAll("\\{" + "COUNTRY_CODE" + "\\}", COUNTRY_CODE.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (apiKey == null) throw new Exception("Missing required parameter 'apiKey' when calling FaxReceivingApi->countriesCountryCodeDidGroupsGet")

    didGroupIds match {
      case Some(param) => queryParams += "didGroupIds" -> param.toString
      case _ => queryParams
    }
    stateId match {
      case Some(param) => queryParams += "stateId" -> param.toString
      case _ => queryParams
    }
    cityNamePattern match {
      case Some(param) => queryParams += "cityNamePattern" -> param.toString
      case _ => queryParams
    }
    queryParams += "areaCode" -> areaCode.toString
    headerParams += "api_key" -> apiKey.toString

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def countriesGet(apiKey: String)(implicit reader: ClientResponseReader[InlineResponse20012]): Future[InlineResponse20012] = {
    // create path and map variables
    val path = (addFmt("/countries"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (apiKey == null) throw new Exception("Missing required parameter 'apiKey' when calling FaxReceivingApi->countriesGet")

    headerParams += "api_key" -> apiKey.toString

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def incomingFaxesGet(apiKey: String,
    limit: Option[String] = None,
    page: Option[String] = None
    )(implicit reader: ClientResponseReader[InlineResponse2004]): Future[InlineResponse2004] = {
    // create path and map variables
    val path = (addFmt("/incoming-faxes"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (apiKey == null) throw new Exception("Missing required parameter 'apiKey' when calling FaxReceivingApi->incomingFaxesGet")

    limit match {
      case Some(param) => queryParams += "limit" -> param.toString
      case _ => queryParams
    }
    page match {
      case Some(param) => queryParams += "page" -> param.toString
      case _ => queryParams
    }
    headerParams += "api_key" -> apiKey.toString

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def incomingFaxesRecipientGet(recipient: Integer,
    apiKey: String,
    limit: Option[String] = None,
    page: Option[String] = None
    )(implicit reader: ClientResponseReader[InlineResponse2004]): Future[InlineResponse2004] = {
    // create path and map variables
    val path = (addFmt("/incoming-faxes/{recipient}")
      replaceAll("\\{" + "recipient" + "\\}", recipient.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (apiKey == null) throw new Exception("Missing required parameter 'apiKey' when calling FaxReceivingApi->incomingFaxesRecipientGet")

    limit match {
      case Some(param) => queryParams += "limit" -> param.toString
      case _ => queryParams
    }
    page match {
      case Some(param) => queryParams += "page" -> param.toString
      case _ => queryParams
    }
    headerParams += "api_key" -> apiKey.toString

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def numbersGet(apiKey: String,
    limit: Option[String] = None,
    page: Option[String] = None
    )(implicit reader: ClientResponseReader[InlineResponse20017]): Future[InlineResponse20017] = {
    // create path and map variables
    val path = (addFmt("/numbers"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (apiKey == null) throw new Exception("Missing required parameter 'apiKey' when calling FaxReceivingApi->numbersGet")

    limit match {
      case Some(param) => queryParams += "limit" -> param.toString
      case _ => queryParams
    }
    page match {
      case Some(param) => queryParams += "page" -> param.toString
      case _ => queryParams
    }
    headerParams += "api_key" -> apiKey.toString

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def provisionNumbersGet(didGroupId: Integer,
    apiKey: String)(implicit reader: ClientResponseReader[InlineResponse20016]): Future[InlineResponse20016] = {
    // create path and map variables
    val path = (addFmt("/countries/didgroups/{did_group_id}/provision"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (apiKey == null) throw new Exception("Missing required parameter 'apiKey' when calling FaxReceivingApi->provisionNumbersGet")

    queryParams += "did_group_id" -> didGroupId.toString
    headerParams += "api_key" -> apiKey.toString

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def statesCountryCodeGet(COUNTRY_CODE: Integer,
    apiKey: String)(implicit reader: ClientResponseReader[InlineResponse20013]): Future[InlineResponse20013] = {
    // create path and map variables
    val path = (addFmt("/states/{COUNTRY_CODE}")
      replaceAll("\\{" + "COUNTRY_CODE" + "\\}", COUNTRY_CODE.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (apiKey == null) throw new Exception("Missing required parameter 'apiKey' when calling FaxReceivingApi->statesCountryCodeGet")

    headerParams += "api_key" -> apiKey.toString

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
